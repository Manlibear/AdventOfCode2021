@page "/Day5"
@inject AdventOfCodeBlazor.Services.IDayApi DayApi

<PageTitle>@MainLayout.SiteTitle("Day 5")</PageTitle>

<div class="day" data-simplebar>
    <div class="row">
        <div class="col-md-6">
            <h2>Part 1: @answer1</h2>
        </div>
        <div class="col-md-6">
            <h2>Part 2: @answer2</h2>
        </div>
    </div>
    <DayCode />
</div>

@code
{
    string answer1 = "";
    string answer2 = "";

    protected override async Task OnInitializedAsync()
    {
        await DayApi.GetDayInput(5).ContinueWith((str) =>
        {
            IEnumerable<Line> lines = str.Result.Split("\n").Select(x => new Line(x));

            // we need to know the max values to create the grid
            var gridMaxX = lines.Max(x => Math.Max(x.Start.X, x.End.X));
            var gridMaxY = lines.Max(x => Math.Max(x.Start.Y, x.End.Y));

            // make the grid using the above sizes
            int[][] grid = new int[gridMaxY + 1][];
            for (int i = 0; i <= gridMaxY; i++)
                grid[i] = new int[gridMaxX + 1];

            // paint the straight lines onto the grid
            foreach (var l in lines.Where(x => x.IsStraight))
            {
                var minX = Math.Min(l.Start.X, l.End.X);
                var maxX = Math.Max(l.Start.X, l.End.X);

                var minY = Math.Min(l.Start.Y, l.End.Y);
                var maxY = Math.Max(l.Start.Y, l.End.Y);

                for (int x = minX; x <= maxX; x++)
                {
                    for (int y = minY; y <= maxY; y++)
                    {
                        grid[y][x]++;
                    }
                }
            }

            // total up the straight line overlaps now before we draw the diagonals
            var straightOverlaps = grid.SelectMany(r => r.Where(c => c > 1)).Count();
            answer1 = straightOverlaps.ToString();

            // draw the diagonals
            foreach (var l in lines.Where(x => !x.IsStraight))
            {
                Coordinate dir = Coordinate.FromLine(l.Start, l.End);
                Coordinate readPoint = l.Start;

                grid[readPoint.Y][readPoint.X]++;
                while (readPoint != l.End)
                {
                    readPoint += dir;
                    grid[readPoint.Y][readPoint.X]++;
                }
            }

            var allOverlaps = grid.SelectMany(r => r.Where(c => c > 1)).Count();
            answer2 = allOverlaps.ToString();
        });
    }

    public class Coordinate
    {
        public int X { get; set; }
        public int Y { get; set; }
        public Coordinate(string info)
        {
            var point = info.Split(",");
            X = int.Parse(point[0]);
            Y = int.Parse(point[1]);
        }

        public Coordinate(int x = 0, int y = 0) { X = x; Y = y; }

        public static Coordinate FromLine(Coordinate start, Coordinate end)
        {
            var difX = end.X - start.X;
            var difY = end.Y - start.Y;
            Coordinate coord = new Coordinate();

            if (difX != 0)
                coord.X = difX > 0 ? 1 : -1;

            if (difY != 0)
                coord.Y = difY > 0 ? 1 : -1;

            return coord;
        }

        public static Coordinate operator +(Coordinate a, Coordinate b) => new Coordinate(a.X + b.X, a.Y + b.Y);
        public static bool operator ==(Coordinate a, Coordinate b) => a.X == b.X && a.Y == b.Y;
        public static bool operator !=(Coordinate a, Coordinate b) => a.X != b.X || a.Y != b.Y;


        public override bool Equals(object? obj)
        {
            if (obj != null && obj is Coordinate)
                return this == (Coordinate)obj;

            return false;
        }

        public override int GetHashCode() => base.GetHashCode();
    }

    public class Line
    {
        public Coordinate Start { get; set; }
        public Coordinate End { get; set; }
        public bool IsStraight => (Start.X == End.X || Start.Y == End.Y);

        public Line(string info)
        {
            var coords = info.Split(" -> ");
            Start = new Coordinate(coords[0]);
            End = new Coordinate(coords[1]);
        }
    }
}